{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "73fd0711",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import read_csv, unique\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from scipy.interpolate import interp1d\n",
    "from scipy.stats import mode\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "from tensorflow import stack\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, GlobalAveragePooling1D, BatchNormalization, MaxPool1D, Reshape, Activation\n",
    "from keras.layers import Conv1D, LSTM, Dropout\n",
    "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "91eab288",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>user-id</th>\n",
       "      <th>activity</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>Z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user-id, activity, timestamp, X, Y, Z]\n",
       "Index: []"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names = ['user-id', 'activity', 'timestamp', 'X', 'Y', 'Z', \"NaN\"]\n",
    "\n",
    "data = pd.read_csv(\"C:/Users/gram/Downloads/heart+disease/processed.hungarian.data\", header=None, names=names, comment=\";\")\n",
    "\n",
    "def convert_to_float(x):\n",
    "    try:\n",
    "        return np.float(x)\n",
    "    except:\n",
    "        return np.nan\n",
    "\n",
    "df = data.drop('NaN', axis=1)\n",
    "df[\"Z\"].replace(regex = True, inplace = True, to_replace = r';', value = r'')\n",
    "    # ... and then this column must be transformed to float explicitly\n",
    "df[\"Z\"] = df[\"Z\"].apply(convert_to_float)\n",
    "    # This is very important otherwise the model will not fit and loss will show up as NAN\n",
    "df.dropna(axis=0, how='any', inplace=True)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20579134",
   "metadata": {},
   "outputs": [],
   "source": [
    "Lmodel = Sequential()\n",
    "Lmodel.add(LSTM(32, return_sequences=True, input_shape=(input_shape,1), activation='relu'))\n",
    "Lmodel.add(LSTM(32,return_sequences=True, activation='relu'))\n",
    "Lmodel.add(MaxPool1D(pool_size=4, padding='same'))\n",
    "Lmodel.add(GlobalAveragePooling1D())\n",
    "Lmodel.add(BatchNormalization(epsilon=1e-06))\n",
    "Lmodel.add(Dense(6))\n",
    "Lmodel.add(Activation('softmax'))\n",
    "\n",
    "print(Lmodel.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60949380",
   "metadata": {},
   "outputs": [],
   "source": [
    "Lmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "history = Lmodel.fit(x_train,\n",
    "                    y_train_hot, \n",
    "                    batch_size= 192, \n",
    "                    epochs=100\n",
    "                   )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ml",
   "language": "python",
   "name": "ml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
