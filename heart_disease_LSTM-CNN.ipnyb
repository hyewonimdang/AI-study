{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "affcd347",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import seaborn as sns\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78d0df4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>289.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>283.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>214.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290</th>\n",
       "      <td>36.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291</th>\n",
       "      <td>48.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>293</th>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>295 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0    40.0  1.0  2.0     140.0  289.0  0.0      0.0    172.0    0.0      0.0   \n",
       "1    49.0  0.0  3.0     160.0  180.0  0.0      0.0    156.0    0.0      1.0   \n",
       "2    37.0  1.0  2.0     130.0  283.0  0.0      1.0     98.0    0.0      0.0   \n",
       "3    48.0  0.0  4.0     138.0  214.0  0.0      0.0    108.0    1.0      1.5   \n",
       "4    54.0  1.0  3.0     150.0   -9.0  0.0      0.0    122.0    0.0      0.0   \n",
       "..    ...  ...  ...       ...    ...  ...      ...      ...    ...      ...   \n",
       "290  36.0  1.0  2.0     120.0  166.0  0.0      0.0    180.0    0.0      0.0   \n",
       "291  48.0  1.0  3.0     110.0  211.0  0.0      0.0    138.0    0.0      0.0   \n",
       "292  47.0  0.0  2.0     140.0  257.0  0.0      0.0    135.0    0.0      1.0   \n",
       "293  53.0  1.0  4.0     130.0  182.0  0.0      0.0    148.0    0.0      0.0   \n",
       "294   NaN  NaN  NaN       NaN    NaN  NaN      NaN      NaN    NaN      NaN   \n",
       "\n",
       "     slope   ca  thal  num  \n",
       "0     -9.0 -9.0  -9.0  0.0  \n",
       "1      2.0 -9.0  -9.0  1.0  \n",
       "2     -9.0 -9.0  -9.0  0.0  \n",
       "3      2.0 -9.0  -9.0  3.0  \n",
       "4     -9.0 -9.0  -9.0  0.0  \n",
       "..     ...  ...   ...  ...  \n",
       "290   -9.0 -9.0  -9.0  0.0  \n",
       "291   -9.0 -9.0   6.0  0.0  \n",
       "292    1.0 -9.0  -9.0  0.0  \n",
       "293   -9.0 -9.0  -9.0  0.0  \n",
       "294    NaN  NaN   NaN  NaN  \n",
       "\n",
       "[295 rows x 14 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path_new = \"C:/Users/gram/Downloads/heart+disease/reprocessed.hungarian.data\"\n",
    "\n",
    "column_names = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', \n",
    "                'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'num']\n",
    "\n",
    "df = pd.read_csv(file_path_new, names=column_names, sep=' ', header=None)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e85f93d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int64)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#결측치\n",
    "\n",
    "df.isna().sum().to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6a473f90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#결측치 제거\n",
    "\n",
    "cleaned_df = df.dropna()\n",
    "cleaned_df.isna().sum().to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3be850f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>289.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>283.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>214.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289</th>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>308.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290</th>\n",
       "      <td>36.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291</th>\n",
       "      <td>48.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>292</th>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>293</th>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>294 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0    40.0  1.0  2.0     140.0  289.0  0.0      0.0    172.0    0.0      0.0   \n",
       "1    49.0  0.0  3.0     160.0  180.0  0.0      0.0    156.0    0.0      1.0   \n",
       "2    37.0  1.0  2.0     130.0  283.0  0.0      1.0     98.0    0.0      0.0   \n",
       "3    48.0  0.0  4.0     138.0  214.0  0.0      0.0    108.0    1.0      1.5   \n",
       "4    54.0  1.0  3.0     150.0   -9.0  0.0      0.0    122.0    0.0      0.0   \n",
       "..    ...  ...  ...       ...    ...  ...      ...      ...    ...      ...   \n",
       "289  48.0  0.0  2.0      -9.0  308.0  0.0      1.0     -9.0   -9.0      2.0   \n",
       "290  36.0  1.0  2.0     120.0  166.0  0.0      0.0    180.0    0.0      0.0   \n",
       "291  48.0  1.0  3.0     110.0  211.0  0.0      0.0    138.0    0.0      0.0   \n",
       "292  47.0  0.0  2.0     140.0  257.0  0.0      0.0    135.0    0.0      1.0   \n",
       "293  53.0  1.0  4.0     130.0  182.0  0.0      0.0    148.0    0.0      0.0   \n",
       "\n",
       "     slope   ca  thal  num  \n",
       "0     -9.0 -9.0  -9.0  0.0  \n",
       "1      2.0 -9.0  -9.0  1.0  \n",
       "2     -9.0 -9.0  -9.0  0.0  \n",
       "3      2.0 -9.0  -9.0  3.0  \n",
       "4     -9.0 -9.0  -9.0  0.0  \n",
       "..     ...  ...   ...  ...  \n",
       "289    1.0 -9.0  -9.0  0.0  \n",
       "290   -9.0 -9.0  -9.0  0.0  \n",
       "291   -9.0 -9.0   6.0  0.0  \n",
       "292    1.0 -9.0  -9.0  0.0  \n",
       "293   -9.0 -9.0  -9.0  0.0  \n",
       "\n",
       "[294 rows x 14 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "21d3daa4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num\n",
       "0.0    188\n",
       "1.0     37\n",
       "3.0     28\n",
       "2.0     26\n",
       "4.0     15\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned_df['num'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5c3dab9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Label')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Label 별 개수\n",
    "\n",
    "sns.countplot(data = cleaned_df, x=\"num\")\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Label\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f762f8d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>61.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>228.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>238.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>745</th>\n",
       "      <td>58.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>746</th>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>747</th>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749</th>\n",
       "      <td>52.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>750 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0    49.0  0.0  3.0     130.0  207.0  0.0      1.0    135.0    0.0      0.0   \n",
       "1    61.0  0.0  4.0     130.0  294.0  0.0      1.0    120.0    1.0      1.0   \n",
       "2    42.0  1.0  3.0     120.0  228.0  0.0      0.0    152.0    1.0      1.5   \n",
       "3    48.0  1.0  2.0     140.0  238.0  0.0      0.0    118.0    0.0      0.0   \n",
       "4    53.0  1.0  2.0     140.0  320.0  0.0      0.0    162.0    0.0      0.0   \n",
       "..    ...  ...  ...       ...    ...  ...      ...      ...    ...      ...   \n",
       "745  58.0  1.0  3.0     160.0  211.0  1.0      1.0     92.0    0.0      0.0   \n",
       "746  50.0  1.0  4.0     130.0  233.0  0.0      0.0    121.0    1.0      2.0   \n",
       "747  54.0  1.0  4.0     200.0  198.0  0.0      0.0    142.0    1.0      2.0   \n",
       "748  38.0  1.0  4.0     110.0   -9.0  0.0      0.0    150.0    1.0      1.0   \n",
       "749  52.0  1.0  4.0     170.0   -9.0  0.0      0.0    126.0    1.0      1.5   \n",
       "\n",
       "     slope   ca  thal  num  \n",
       "0     -9.0 -9.0  -9.0  0.0  \n",
       "1      2.0 -9.0  -9.0  0.0  \n",
       "2      2.0 -9.0  -9.0  0.0  \n",
       "3     -9.0 -9.0  -9.0  0.0  \n",
       "4     -9.0 -9.0  -9.0  0.0  \n",
       "..     ...  ...   ...  ...  \n",
       "745   -9.0 -9.0  -9.0  2.0  \n",
       "746    2.0 -9.0   7.0  2.0  \n",
       "747    2.0 -9.0  -9.0  2.0  \n",
       "748    2.0 -9.0  -9.0  2.0  \n",
       "749    2.0 -9.0  -9.0  2.0  \n",
       "\n",
       "[750 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 각 클래스별로 5000개씩 데이터 추출\n",
    "sampled_df = pd.DataFrame()  # 추출된 데이터를 저장할 빈 DataFrame 생성\n",
    "classes = cleaned_df['num'].unique()  # 'Label' 열의 고유값을 추출하여 클래스 목록 생성\n",
    "\n",
    "for cls in classes:\n",
    "    class_df = cleaned_df[cleaned_df['num'] == cls]  # 현재 클래스에 해당하는 데이터만 필터링\n",
    "    sampled_class_df = class_df.sample(n=150, replace=True)  # 클래스 데이터에서 5000개 샘플 추출, replace=True는 데이터가 5000개 미만일 때 중복 허용\n",
    "    sampled_df = pd.concat([sampled_df, sampled_class_df], ignore_index=True)  # 추출된 데이터를 sampled_df에 추가\n",
    "sampled_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "52d3bc8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num\n",
       "0.0    150\n",
       "1.0    150\n",
       "3.0    150\n",
       "4.0    150\n",
       "2.0    150\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_df['num'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b333e300",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>61.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>228.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>238.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>53.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>745</th>\n",
       "      <td>58.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>746</th>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>747</th>\n",
       "      <td>54.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749</th>\n",
       "      <td>52.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>-9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>750 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0    49.0  0.0  3.0     130.0  207.0  0.0      1.0    135.0    0.0      0.0   \n",
       "1    61.0  0.0  4.0     130.0  294.0  0.0      1.0    120.0    1.0      1.0   \n",
       "2    42.0  1.0  3.0     120.0  228.0  0.0      0.0    152.0    1.0      1.5   \n",
       "3    48.0  1.0  2.0     140.0  238.0  0.0      0.0    118.0    0.0      0.0   \n",
       "4    53.0  1.0  2.0     140.0  320.0  0.0      0.0    162.0    0.0      0.0   \n",
       "..    ...  ...  ...       ...    ...  ...      ...      ...    ...      ...   \n",
       "745  58.0  1.0  3.0     160.0  211.0  1.0      1.0     92.0    0.0      0.0   \n",
       "746  50.0  1.0  4.0     130.0  233.0  0.0      0.0    121.0    1.0      2.0   \n",
       "747  54.0  1.0  4.0     200.0  198.0  0.0      0.0    142.0    1.0      2.0   \n",
       "748  38.0  1.0  4.0     110.0   -9.0  0.0      0.0    150.0    1.0      1.0   \n",
       "749  52.0  1.0  4.0     170.0   -9.0  0.0      0.0    126.0    1.0      1.5   \n",
       "\n",
       "     slope   ca  thal  \n",
       "0     -9.0 -9.0  -9.0  \n",
       "1      2.0 -9.0  -9.0  \n",
       "2      2.0 -9.0  -9.0  \n",
       "3     -9.0 -9.0  -9.0  \n",
       "4     -9.0 -9.0  -9.0  \n",
       "..     ...  ...   ...  \n",
       "745   -9.0 -9.0  -9.0  \n",
       "746    2.0 -9.0   7.0  \n",
       "747    2.0 -9.0  -9.0  \n",
       "748    2.0 -9.0  -9.0  \n",
       "749    2.0 -9.0  -9.0  \n",
       "\n",
       "[750 rows x 13 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = sampled_df.drop(['num'], axis=1)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e597738c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Label')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Label 별 개수\n",
    "\n",
    "sns.countplot(data = sampled_df, x=\"num\")\n",
    "plt.xlabel(\"\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Label\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c47ab4bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num\n",
       "0.0    150\n",
       "1.0    150\n",
       "3.0    150\n",
       "4.0    150\n",
       "2.0    150\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = sampled_df['num']\n",
    "y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "11c02431",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((600, 13), (150, 13), (600,), (150,))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.2, random_state = 23)\n",
    "X_train = X_train.values\n",
    "X_test = X_test.values\n",
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4221e848",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_onehot = pd.get_dummies(y_train).values\n",
    "y_test_onehot = pd.get_dummies(y_test).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "141f2557",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(600, 13)\n",
      "(150, 13)\n",
      "(600, 5)\n",
      "(150, 5)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train_onehot.shape)\n",
    "print(y_test_onehot.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c5f66eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((600, 13, 1), (150, 13, 1))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#데이터셋을 3차원으로 변환\n",
    "\n",
    "X_train = X_train.reshape(len(X_train), X_train.shape[1], 1)\n",
    "X_test = X_test.reshape(len(X_test), X_test.shape[1], 1)\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ff7e773f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Conv1D, LSTM, Dropout, MaxPooling1D\n",
    "from tensorflow.keras.layers import Input, Reshape\n",
    "from keras.layers import Dense, Flatten, Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ee3bc95b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 13, 1)]           0         \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 13, 48)            9600      \n",
      "                                                                 \n",
      " reshape (Reshape)           (None, 13, 48)            0         \n",
      "                                                                 \n",
      " conv1d (Conv1D)             (None, 13, 64)            18496     \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 13, 64)            0         \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 832)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 48)                39984     \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 5)                 245       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 68,325\n",
      "Trainable params: 68,325\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "input_layer = Input(shape=(13, 1))\n",
    "\n",
    "lstm1 = LSTM(units=48, activation='relu', return_sequences=True)(input_layer)\n",
    "reshaped = Reshape((-1, 48))(lstm1)\n",
    "conv1 = Conv1D(filters=64, kernel_size=6, padding = 'same', activation='relu')(reshaped)\n",
    "dropout = Dropout(rate=0.3)(conv1)\n",
    "flatten = Flatten()(dropout)\n",
    "dens1 = Dense(48, activation = \"relu\")(flatten)\n",
    "outputs = Dense(5, activation = \"softmax\")(dens1)\n",
    "\n",
    "model = keras.Model(input_layer, outputs)\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "209f0ccd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "19/19 [==============================] - 5s 83ms/step - loss: 2.3429 - accuracy: 0.2017 - val_loss: 1.5951 - val_accuracy: 0.1933\n",
      "Epoch 2/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 1.6076 - accuracy: 0.2467 - val_loss: 1.5805 - val_accuracy: 0.2600\n",
      "Epoch 3/100\n",
      "19/19 [==============================] - 1s 44ms/step - loss: 1.5792 - accuracy: 0.2250 - val_loss: 1.5395 - val_accuracy: 0.2533\n",
      "Epoch 4/100\n",
      "19/19 [==============================] - 1s 38ms/step - loss: 1.5215 - accuracy: 0.2650 - val_loss: 1.4769 - val_accuracy: 0.2600\n",
      "Epoch 5/100\n",
      "19/19 [==============================] - 1s 41ms/step - loss: 1.4716 - accuracy: 0.3367 - val_loss: 1.4372 - val_accuracy: 0.3333\n",
      "Epoch 6/100\n",
      "19/19 [==============================] - 1s 35ms/step - loss: 1.4281 - accuracy: 0.3300 - val_loss: 1.4056 - val_accuracy: 0.3933\n",
      "Epoch 7/100\n",
      "19/19 [==============================] - 1s 44ms/step - loss: 1.3898 - accuracy: 0.3617 - val_loss: 1.3995 - val_accuracy: 0.4067\n",
      "Epoch 8/100\n",
      "19/19 [==============================] - 1s 35ms/step - loss: 1.3578 - accuracy: 0.4183 - val_loss: 1.4183 - val_accuracy: 0.3733\n",
      "Epoch 9/100\n",
      "19/19 [==============================] - 1s 42ms/step - loss: 1.3552 - accuracy: 0.4283 - val_loss: 1.3655 - val_accuracy: 0.3667\n",
      "Epoch 10/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 1.3082 - accuracy: 0.4350 - val_loss: 1.3517 - val_accuracy: 0.4267\n",
      "Epoch 11/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 1.2939 - accuracy: 0.4550 - val_loss: 1.5451 - val_accuracy: 0.3000\n",
      "Epoch 12/100\n",
      "19/19 [==============================] - 1s 42ms/step - loss: 1.2976 - accuracy: 0.4550 - val_loss: 1.3638 - val_accuracy: 0.3600\n",
      "Epoch 13/100\n",
      "19/19 [==============================] - 1s 30ms/step - loss: 1.2969 - accuracy: 0.4567 - val_loss: 1.3682 - val_accuracy: 0.4333\n",
      "Epoch 14/100\n",
      "19/19 [==============================] - 1s 35ms/step - loss: 1.3010 - accuracy: 0.4183 - val_loss: 1.3472 - val_accuracy: 0.4467\n",
      "Epoch 15/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 1.2585 - accuracy: 0.4883 - val_loss: 1.3623 - val_accuracy: 0.3867\n",
      "Epoch 16/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 1.2466 - accuracy: 0.4783 - val_loss: 1.3785 - val_accuracy: 0.3733\n",
      "Epoch 17/100\n",
      "19/19 [==============================] - 1s 44ms/step - loss: 1.2301 - accuracy: 0.4883 - val_loss: 1.3360 - val_accuracy: 0.4200\n",
      "Epoch 18/100\n",
      "19/19 [==============================] - 1s 49ms/step - loss: 1.2708 - accuracy: 0.4633 - val_loss: 1.3454 - val_accuracy: 0.4067\n",
      "Epoch 19/100\n",
      "19/19 [==============================] - 1s 43ms/step - loss: 1.2206 - accuracy: 0.4850 - val_loss: 1.3015 - val_accuracy: 0.4267\n",
      "Epoch 20/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 1.2067 - accuracy: 0.4917 - val_loss: 1.2887 - val_accuracy: 0.4533\n",
      "Epoch 21/100\n",
      "19/19 [==============================] - 1s 42ms/step - loss: 1.1574 - accuracy: 0.5167 - val_loss: 1.2469 - val_accuracy: 0.4867\n",
      "Epoch 22/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 1.1251 - accuracy: 0.5533 - val_loss: 1.2041 - val_accuracy: 0.4867\n",
      "Epoch 23/100\n",
      "19/19 [==============================] - 1s 45ms/step - loss: 1.1047 - accuracy: 0.5533 - val_loss: 1.2757 - val_accuracy: 0.4333\n",
      "Epoch 24/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 1.1063 - accuracy: 0.5500 - val_loss: 1.2340 - val_accuracy: 0.4800\n",
      "Epoch 25/100\n",
      "19/19 [==============================] - 1s 43ms/step - loss: 1.0614 - accuracy: 0.5483 - val_loss: 1.2531 - val_accuracy: 0.5000\n",
      "Epoch 26/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 1.0797 - accuracy: 0.5467 - val_loss: 1.1832 - val_accuracy: 0.5733\n",
      "Epoch 27/100\n",
      "19/19 [==============================] - 1s 43ms/step - loss: 1.0462 - accuracy: 0.5567 - val_loss: 1.1999 - val_accuracy: 0.5333\n",
      "Epoch 28/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 1.0340 - accuracy: 0.5817 - val_loss: 1.1101 - val_accuracy: 0.6000\n",
      "Epoch 29/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.9521 - accuracy: 0.6433 - val_loss: 1.1059 - val_accuracy: 0.5000\n",
      "Epoch 30/100\n",
      "19/19 [==============================] - 1s 44ms/step - loss: 0.9638 - accuracy: 0.6233 - val_loss: 1.1172 - val_accuracy: 0.5600\n",
      "Epoch 31/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.9393 - accuracy: 0.6400 - val_loss: 1.1380 - val_accuracy: 0.5800\n",
      "Epoch 32/100\n",
      "19/19 [==============================] - 1s 43ms/step - loss: 0.8924 - accuracy: 0.6667 - val_loss: 1.0585 - val_accuracy: 0.5733\n",
      "Epoch 33/100\n",
      "19/19 [==============================] - 1s 30ms/step - loss: 0.8731 - accuracy: 0.6517 - val_loss: 1.0651 - val_accuracy: 0.6267\n",
      "Epoch 34/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.9161 - accuracy: 0.6200 - val_loss: 1.1379 - val_accuracy: 0.5733\n",
      "Epoch 35/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.9409 - accuracy: 0.6317 - val_loss: 1.2663 - val_accuracy: 0.4867\n",
      "Epoch 36/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 1.0031 - accuracy: 0.5900 - val_loss: 1.1576 - val_accuracy: 0.5667\n",
      "Epoch 37/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 0.9014 - accuracy: 0.6567 - val_loss: 1.1114 - val_accuracy: 0.5533\n",
      "Epoch 38/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.8718 - accuracy: 0.6617 - val_loss: 1.0580 - val_accuracy: 0.5533\n",
      "Epoch 39/100\n",
      "19/19 [==============================] - 1s 38ms/step - loss: 0.8136 - accuracy: 0.6833 - val_loss: 1.1735 - val_accuracy: 0.5800\n",
      "Epoch 40/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.8098 - accuracy: 0.6833 - val_loss: 1.1410 - val_accuracy: 0.5867\n",
      "Epoch 41/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.7881 - accuracy: 0.6917 - val_loss: 1.0469 - val_accuracy: 0.6200\n",
      "Epoch 42/100\n",
      "19/19 [==============================] - 1s 31ms/step - loss: 0.7503 - accuracy: 0.7267 - val_loss: 0.9758 - val_accuracy: 0.6267\n",
      "Epoch 43/100\n",
      "19/19 [==============================] - 1s 31ms/step - loss: 0.7048 - accuracy: 0.7517 - val_loss: 0.9637 - val_accuracy: 0.6467\n",
      "Epoch 44/100\n",
      "19/19 [==============================] - 1s 40ms/step - loss: 0.7179 - accuracy: 0.7017 - val_loss: 1.1112 - val_accuracy: 0.6267\n",
      "Epoch 45/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.7537 - accuracy: 0.7250 - val_loss: 0.9849 - val_accuracy: 0.6600\n",
      "Epoch 46/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.7050 - accuracy: 0.7383 - val_loss: 1.0301 - val_accuracy: 0.6200\n",
      "Epoch 47/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.7373 - accuracy: 0.7033 - val_loss: 0.9556 - val_accuracy: 0.6733\n",
      "Epoch 48/100\n",
      "19/19 [==============================] - 1s 28ms/step - loss: 0.7026 - accuracy: 0.7383 - val_loss: 0.9557 - val_accuracy: 0.6067\n",
      "Epoch 49/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.6827 - accuracy: 0.7383 - val_loss: 1.0236 - val_accuracy: 0.6333\n",
      "Epoch 50/100\n",
      "19/19 [==============================] - 1s 38ms/step - loss: 0.7007 - accuracy: 0.7133 - val_loss: 1.0207 - val_accuracy: 0.6733\n",
      "Epoch 51/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.6978 - accuracy: 0.7267 - val_loss: 1.0813 - val_accuracy: 0.5467\n",
      "Epoch 52/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.6713 - accuracy: 0.7367 - val_loss: 1.0673 - val_accuracy: 0.6333\n",
      "Epoch 53/100\n",
      "19/19 [==============================] - 1s 31ms/step - loss: 0.6576 - accuracy: 0.7433 - val_loss: 0.9190 - val_accuracy: 0.6667\n",
      "Epoch 54/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.6242 - accuracy: 0.7450 - val_loss: 0.9070 - val_accuracy: 0.7067\n",
      "Epoch 55/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.5615 - accuracy: 0.7883 - val_loss: 0.8244 - val_accuracy: 0.7200\n",
      "Epoch 56/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.5462 - accuracy: 0.7883 - val_loss: 0.8285 - val_accuracy: 0.7400\n",
      "Epoch 57/100\n",
      "19/19 [==============================] - 1s 41ms/step - loss: 0.7211 - accuracy: 0.7400 - val_loss: 1.2277 - val_accuracy: 0.6400\n",
      "Epoch 58/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19/19 [==============================] - 1s 30ms/step - loss: 0.7432 - accuracy: 0.7283 - val_loss: 0.9697 - val_accuracy: 0.7133\n",
      "Epoch 59/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.6181 - accuracy: 0.7583 - val_loss: 0.8619 - val_accuracy: 0.6867\n",
      "Epoch 60/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.5361 - accuracy: 0.8100 - val_loss: 0.8221 - val_accuracy: 0.7133\n",
      "Epoch 61/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 0.5294 - accuracy: 0.7933 - val_loss: 0.9546 - val_accuracy: 0.7133\n",
      "Epoch 62/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.5373 - accuracy: 0.7967 - val_loss: 0.8475 - val_accuracy: 0.7200\n",
      "Epoch 63/100\n",
      "19/19 [==============================] - 1s 30ms/step - loss: 0.4732 - accuracy: 0.8250 - val_loss: 0.7821 - val_accuracy: 0.7133\n",
      "Epoch 64/100\n",
      "19/19 [==============================] - 1s 40ms/step - loss: 0.4944 - accuracy: 0.8167 - val_loss: 0.8265 - val_accuracy: 0.7200\n",
      "Epoch 65/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.5082 - accuracy: 0.8067 - val_loss: 0.7847 - val_accuracy: 0.7933\n",
      "Epoch 66/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.4578 - accuracy: 0.8267 - val_loss: 0.8038 - val_accuracy: 0.7200\n",
      "Epoch 67/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.4736 - accuracy: 0.8383 - val_loss: 0.7436 - val_accuracy: 0.8000\n",
      "Epoch 68/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.4653 - accuracy: 0.8150 - val_loss: 0.7517 - val_accuracy: 0.8000\n",
      "Epoch 69/100\n",
      "19/19 [==============================] - 1s 30ms/step - loss: 0.4205 - accuracy: 0.8417 - val_loss: 0.8266 - val_accuracy: 0.7733\n",
      "Epoch 70/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.4015 - accuracy: 0.8533 - val_loss: 0.8135 - val_accuracy: 0.7533\n",
      "Epoch 71/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.4154 - accuracy: 0.8567 - val_loss: 0.7302 - val_accuracy: 0.7933\n",
      "Epoch 72/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.3655 - accuracy: 0.8733 - val_loss: 0.6832 - val_accuracy: 0.8133\n",
      "Epoch 73/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 0.3701 - accuracy: 0.8667 - val_loss: 0.7020 - val_accuracy: 0.7933\n",
      "Epoch 74/100\n",
      "19/19 [==============================] - 1s 31ms/step - loss: 0.3798 - accuracy: 0.8433 - val_loss: 0.7898 - val_accuracy: 0.7067\n",
      "Epoch 75/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.4072 - accuracy: 0.8300 - val_loss: 0.8791 - val_accuracy: 0.7267\n",
      "Epoch 76/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.3992 - accuracy: 0.8550 - val_loss: 0.7210 - val_accuracy: 0.7800\n",
      "Epoch 77/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.3655 - accuracy: 0.8483 - val_loss: 0.6271 - val_accuracy: 0.7933\n",
      "Epoch 78/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 0.4267 - accuracy: 0.8483 - val_loss: 0.7802 - val_accuracy: 0.7333\n",
      "Epoch 79/100\n",
      "19/19 [==============================] - 1s 35ms/step - loss: 0.3947 - accuracy: 0.8367 - val_loss: 0.6520 - val_accuracy: 0.8133\n",
      "Epoch 80/100\n",
      "19/19 [==============================] - 1s 39ms/step - loss: 0.3271 - accuracy: 0.8867 - val_loss: 0.6711 - val_accuracy: 0.8067\n",
      "Epoch 81/100\n",
      "19/19 [==============================] - 1s 38ms/step - loss: 0.2729 - accuracy: 0.9067 - val_loss: 0.7421 - val_accuracy: 0.7933\n",
      "Epoch 82/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.3209 - accuracy: 0.8783 - val_loss: 0.5909 - val_accuracy: 0.8133\n",
      "Epoch 83/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.3395 - accuracy: 0.8700 - val_loss: 0.7262 - val_accuracy: 0.7400\n",
      "Epoch 84/100\n",
      "19/19 [==============================] - 1s 30ms/step - loss: 0.3498 - accuracy: 0.8667 - val_loss: 0.7296 - val_accuracy: 0.8067\n",
      "Epoch 85/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.3006 - accuracy: 0.8850 - val_loss: 0.6722 - val_accuracy: 0.7867\n",
      "Epoch 86/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.2656 - accuracy: 0.9100 - val_loss: 0.5622 - val_accuracy: 0.8400\n",
      "Epoch 87/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.2335 - accuracy: 0.9183 - val_loss: 0.5899 - val_accuracy: 0.8267\n",
      "Epoch 88/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.2244 - accuracy: 0.9233 - val_loss: 0.6253 - val_accuracy: 0.8133\n",
      "Epoch 89/100\n",
      "19/19 [==============================] - 1s 29ms/step - loss: 0.2547 - accuracy: 0.9083 - val_loss: 0.5960 - val_accuracy: 0.8733\n",
      "Epoch 90/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.2419 - accuracy: 0.9067 - val_loss: 0.5157 - val_accuracy: 0.8867\n",
      "Epoch 91/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.2239 - accuracy: 0.9200 - val_loss: 0.6053 - val_accuracy: 0.7667\n",
      "Epoch 92/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.2122 - accuracy: 0.9267 - val_loss: 0.5881 - val_accuracy: 0.8733\n",
      "Epoch 93/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.1892 - accuracy: 0.9383 - val_loss: 0.5675 - val_accuracy: 0.8400\n",
      "Epoch 94/100\n",
      "19/19 [==============================] - 1s 32ms/step - loss: 0.1819 - accuracy: 0.9333 - val_loss: 0.5677 - val_accuracy: 0.8467\n",
      "Epoch 95/100\n",
      "19/19 [==============================] - 1s 36ms/step - loss: 0.2072 - accuracy: 0.9250 - val_loss: 0.5760 - val_accuracy: 0.8667\n",
      "Epoch 96/100\n",
      "19/19 [==============================] - 1s 34ms/step - loss: 0.2031 - accuracy: 0.9267 - val_loss: 0.7270 - val_accuracy: 0.8267\n",
      "Epoch 97/100\n",
      "19/19 [==============================] - 1s 37ms/step - loss: 0.1609 - accuracy: 0.9433 - val_loss: 0.5322 - val_accuracy: 0.8800\n",
      "Epoch 98/100\n",
      "19/19 [==============================] - 1s 35ms/step - loss: 0.1740 - accuracy: 0.9450 - val_loss: 0.6783 - val_accuracy: 0.8733\n",
      "Epoch 99/100\n",
      "19/19 [==============================] - 1s 31ms/step - loss: 0.2092 - accuracy: 0.9300 - val_loss: 0.5903 - val_accuracy: 0.8733\n",
      "Epoch 100/100\n",
      "19/19 [==============================] - 1s 33ms/step - loss: 0.1908 - accuracy: 0.9300 - val_loss: 0.5727 - val_accuracy: 0.8333\n"
     ]
    }
   ],
   "source": [
    "train_epochs = 100\n",
    "history = model.fit(X_train, y_train_onehot, epochs=train_epochs, validation_data = (X_test, y_test_onehot))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6a7c6fe4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHFCAYAAAAOmtghAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACMuElEQVR4nO3ddXjVZR/H8fc56x4MViwYOWJ0g4QoAgaIgQgCKigqKCKKoIQYKAryGIAYoKhgEIIogpQgKDmaURsjNmIb6z6/54/bs+6d7Yzt+7quXefsl/f5sec5H+/UaZqmIYQQQghRTejNXQAhhBBCCFOScCOEEEKIakXCjRBCCCGqFQk3QgghhKhWJNwIIYQQolqRcCOEEEKIakXCjRBCCCGqFQk3QgghhKhWJNwIIYQQolqRcCNEDjqdrkQ/27dvL9d9Zs2ahU6nK9O527dvN0kZqrrRo0dTv379KnHf+vXrM3r06GLPLc+/ze7du5k1axY3b97Mt69379707t271Ncsr7CwMHQ6HcuWLav0ewtRHpbmLoAQVcmePXty/f7mm2+ybds2tm7dmmt78+bNy3WfMWPG0L9//zKd265dO/bs2VPuMoiSW7NmDc7OzhV6j927d/PGG28wevRoXF1dc+1buHBhhd5biOpGwo0QOXTp0iXX73Xr1kWv1+fbnldSUhL29vYlvo+Pjw8+Pj5lKqOzs3Ox5RGm1bZtW7PeX4KsEKUjzVJClFLv3r1p2bIlf/31F926dcPe3p4nnngCgB9++IF+/frh5eWFnZ0dzZo149VXXyUxMTHXNQpqlqpfvz733HMPGzdupF27dtjZ2REYGMhXX32V67iCmj5Gjx6No6MjZ8+eZeDAgTg6OuLr68tLL71EampqrvMvXbrEgw8+iJOTE66urgwfPpx9+/aVqPnh+vXrPPvsszRv3hxHR0fc3d25/fbb2blzZ67jjM0ZH3zwAfPnzycgIABHR0e6du3KP//8k++6y5Yto2nTptjY2NCsWTO++eabIsthNHjwYPz9/TEYDPn2de7cmXbt2mX9/umnn9KzZ0/c3d1xcHAgKCiIuXPnkp6eXux9CmqWOnXqFP3798fe3p46deowbtw44uPj8527efNmBg0ahI+PD7a2tjRq1Iinn36aGzduZB0za9YsXn75ZQACAgLyNX8W1CwVHR3Ns88+S7169bC2tqZBgwa89tpr+f69dTod48ePZ/ny5TRr1gx7e3tat27Nr7/+WuznLsyuXbvo27cvTk5O2Nvb061bNzZs2JDrmKSkJCZPnkxAQAC2trbUrl2bDh06sGLFiqxjzp8/zyOPPIK3tzc2NjZ4eHjQt29fgoODy1w2IUBqboQok4iICEaMGMErr7zCO++8g16v/jvhzJkzDBw4kIkTJ+Lg4MCpU6d477332Lt3b76mrYIcPnyYl156iVdffRUPDw+++OILnnzySRo1akTPnj2LPDc9PZ377ruPJ598kpdeeom//vqLN998ExcXF2bMmAFAYmIiffr0ITo6mvfee49GjRqxceNGhg4dWqLPHR0dDcDMmTPx9PQkISGBNWvW0Lt3b7Zs2ZLvC/jTTz8lMDCQBQsWADB9+nQGDhxIaGgoLi4ugAo2jz/+OIMGDWLevHnExsYya9YsUlNTs55rYZ544gkGDRrE1q1bueOOO7K2nzp1ir179/LRRx9lbTt37hyPPvooAQEBWFtbc/jwYd5++21OnTqVL0AW5+rVq/Tq1QsrKysWLlyIh4cH3333HePHj8937Llz5+jatStjxozBxcWFsLAw5s+fT48ePTh69ChWVlaMGTOG6OhoPv74Y1avXo2XlxdQeI1NSkoKffr04dy5c7zxxhu0atWKnTt3MmfOHIKDg/MFjQ0bNrBv3z5mz56No6Mjc+fO5f777yckJIQGDRqU6rPv2LGDO++8k1atWvHll19iY2PDwoULuffee1mxYkXW39KkSZNYvnw5b731Fm3btiUxMZFjx44RFRWVda2BAweSmZnJ3Llz8fPz48aNG+zevbvAfkdClIomhCjUqFGjNAcHh1zbevXqpQHali1bijzXYDBo6enp2o4dOzRAO3z4cNa+mTNnann/5+fv76/Z2tpqFy5cyNqWnJys1a5dW3v66aeztm3btk0DtG3btuUqJ6D9+OOPua45cOBArWnTplm/f/rppxqg/f7777mOe/rppzVAW7p0aZGfKa+MjAwtPT1d69u3r3b//fdnbQ8NDdUALSgoSMvIyMjavnfvXg3QVqxYoWmapmVmZmre3t5au3btNIPBkHVcWFiYZmVlpfn7+xd5//T0dM3Dw0N79NFHc21/5ZVXNGtra+3GjRsFnpeZmamlp6dr33zzjWZhYaFFR0dn7Rs1alS++/r7+2ujRo3K+n3KlCmaTqfTgoODcx1355135vu3ycn4N3HhwgUN0H755Zesfe+//74GaKGhofnO69Wrl9arV6+s3xcvXlzgv/d7772nAdqmTZuytgGah4eHFhcXl7UtMjJS0+v12pw5cwosp5Hx3zHn30WXLl00d3d3LT4+PmtbRkaG1rJlS83Hxyfr37Fly5ba4MGDC732jRs3NEBbsGBBkWUQoiykWUqIMqhVqxa33357vu3nz5/n0UcfxdPTEwsLC6ysrOjVqxcAJ0+eLPa6bdq0wc/PL+t3W1tbmjRpwoULF4o9V6fTce+99+ba1qpVq1zn7tixAycnp3ydmYcNG1bs9Y0WL15Mu3btsLW1xdLSEisrK7Zs2VLg57v77ruxsLDIVR4gq0whISFcuXKFRx99NFcznb+/P926dSu2LJaWlowYMYLVq1cTGxsLQGZmJsuXL2fQoEG4ubllHXvo0CHuu+8+3Nzcsv5tRo4cSWZmJqdPny7x5wfYtm0bLVq0oHXr1rm2P/roo/mOvXbtGuPGjcPX1zfrefn7+wMl+5soyNatW3FwcODBBx/Mtd3YdLZly5Zc2/v06YOTk1PW7x4eHri7u5fo7yqnxMRE/v33Xx588EEcHR2ztltYWPDYY49x6dIlQkJCAOjUqRO///47r776Ktu3byc5OTnXtWrXrk3Dhg15//33mT9/PocOHSqweVGIspBwI0QZGJsNckpISOC2227j33//5a233mL79u3s27eP1atXA+T7P/eC5PwyNrKxsSnRufb29tja2uY7NyUlJev3qKgoPDw88p1b0LaCzJ8/n2eeeYbOnTuzatUq/vnnH/bt20f//v0LLGPez2NjYwNkPwtjE4Wnp2e+cwvaVpAnnniClJQUVq5cCcAff/xBREQEjz/+eNYx4eHh3HbbbVy+fJn//e9/7Ny5k3379vHpp5/mKk9JRUVFlajMBoOBfv36sXr1al555RW2bNnC3r17s/odlfa+ee+ft9+Wu7s7lpaWuZp+oHx/VznFxMSgaVqBf//e3t5ZZQP46KOPmDJlCmvXrqVPnz7Url2bwYMHc+bMGUCF8S1btnDXXXcxd+5c2rVrR926dXn++ecL7LskRGlInxshyqCgOWq2bt3KlStX2L59e1ZtDVCl+g+4ubmxd+/efNsjIyNLdP63335L7969WbRoUa7tZf0yMn7pFnT/kpapefPmdOrUiaVLl/L000+zdOlSvL296devX9Yxa9euJTExkdWrV2fVmgBl7rjq5uZWojIfO3aMw4cPs2zZMkaNGpW1/ezZs2W6b877//vvv2ialutv8dq1a2RkZFCnTp1yXb8wtWrVQq/XExERkW/flStXALLu7eDgwBtvvMEbb7zB1atXs2px7r33Xk6dOgWoGrovv/wSgNOnT/Pjjz8ya9Ys0tLSWLx4cYV8BlEzSM2NECZi/JIx1k4YffbZZ+YoToF69epFfHw8v//+e67txlqP4uh0unyf78iRI/nmByqppk2b4uXlxYoVK9A0LWv7hQsX2L17d4mv8/jjj/Pvv/+ya9cu1q9fz6hRo3I1hxX0b6NpGp9//nmZyt2nTx+OHz/O4cOHc23//vvvc/1emr+JvLVaRenbty8JCQmsXbs213bjKLO+ffsWe42ycHBwoHPnzqxevTpXOQ0GA99++y0+Pj40adIk33keHh6MHj2aYcOGERISQlJSUr5jmjRpwuuvv05QUBAHDx6skPKLmkNqboQwkW7dulGrVi3GjRvHzJkzsbKy4rvvvsv3BWhOo0aN4sMPP2TEiBG89dZbNGrUiN9//50//vgDoNjRSffccw9vvvkmM2fOpFevXoSEhDB79mwCAgLIyMgodXn0ej1vvvkmY8aM4f7772fs2LHcvHmTWbNmlbhZClSfoUmTJjFs2DBSU1PzDdu+8847sba2ZtiwYbzyyiukpKSwaNEiYmJiSl1mgIkTJ/LVV19x991389Zbb2WNljLWSBgFBgbSsGFDXn31VTRNo3bt2qxfv57Nmzfnu2ZQUBAA//vf/xg1ahRWVlY0bdo0V18Zo5EjR/Lpp58yatQowsLCCAoKYteuXbzzzjsMHDgw18gxU5szZw533nknffr0YfLkyVhbW7Nw4UKOHTvGihUrsgJd586dueeee2jVqhW1atXi5MmTLF++nK5du2Jvb8+RI0cYP348Dz30EI0bN8ba2pqtW7dy5MgRXn311Qorv6gZpOZGCBNxc3Njw4YN2NvbM2LECJ544gkcHR354YcfzF20LA4ODmzdupXevXvzyiuv8MADDxAeHp41A27emXHzeu2113jppZf48ssvufvuu/niiy9YvHgxPXr0KHOZnnzySb744gtOnDjBkCFDmD17NtOmTSuww3ZhXFxcuP/+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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "loss =history.history['loss']\n",
    "val_loss =history.history['val_loss']\n",
    "epochs = range(1, len(loss) + 1)\n",
    "plt.plot(epochs, loss, 'y', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'r', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3050c404",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc =history.history['accuracy']\n",
    "val_acc =history.history['val_accuracy']\n",
    "plt.plot(epochs, acc, 'y', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'r', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "21dab93f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 1s 17ms/step\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report,confusion_matrix\n",
    "\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "y_test_class = np.argmax(y_test_onehot,axis=1)\n",
    "y_pred_class = np.argmax(y_pred,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6cd74675",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.56      0.67        32\n",
      "           1       0.84      0.79      0.81        33\n",
      "           2       0.84      0.80      0.82        20\n",
      "           3       0.81      1.00      0.90        35\n",
      "           4       0.86      1.00      0.92        30\n",
      "\n",
      "    accuracy                           0.83       150\n",
      "   macro avg       0.83      0.83      0.82       150\n",
      "weighted avg       0.83      0.83      0.82       150\n",
      "\n",
      "[[18  5  1  7  1]\n",
      " [ 4 26  2  0  1]\n",
      " [ 0  0 16  1  3]\n",
      " [ 0  0  0 35  0]\n",
      " [ 0  0  0  0 30]]\n"
     ]
    }
   ],
   "source": [
    "#Accuracy of the predicted values\n",
    "from sklearn.metrics import classification_report,confusion_matrix\n",
    "print(classification_report(y_test_class,y_pred_class))\n",
    "print(confusion_matrix(y_test_class,y_pred_class))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0719924",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ml",
   "language": "python",
   "name": "ml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
